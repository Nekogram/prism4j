import ix.Ix
import org.apache.commons.io.FileUtils

import java.nio.charset.StandardCharsets

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.akarnokd:ixjava:1.0.0'
        classpath 'commons-io:commons-io:2.11.0'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java-library'

sourceSets {
    main.java.srcDirs += '../languages'
    test.java.srcDirs += './build/src-gen/'
}

dependencies {

    implementation project(':prism4j')
    implementation project(':annotations')

    testAnnotationProcessor project(':prism4j-bundler')

    compileOnly 'org.jetbrains:annotations:23.0.0'

    testCompileOnly 'org.jetbrains:annotations:23.0.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'commons-io:commons-io:2.11.0'
    testImplementation 'com.github.akarnokd:ixjava:1.0.0'
    testImplementation 'com.google.code.gson:gson:2.8.9'
    testImplementation 'net.javacrumbs.json-unit:json-unit:2.28.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

afterEvaluate {

    final def root = file('./build/src-gen/io/noties/prism4j/languages')
    if (!root.exists()) {
        FileUtils.forceMkdir(root)
    } else {
        // let's clean this directory each time
        FileUtils.cleanDirectory(root)
    }

    final def template = {
        FileUtils.readFileToString(file('./src/Test.java.template'), StandardCharsets.UTF_8)
    }.memoize()

    final def createClassName = { "Test_${it.join('_').replaceAll('-', '_')}" }

    final def createInclude = {
        "{${Ix.fromArray(it).map { "\"$it\"" }.join(',')}}"
    }

    final def createGrammarLocator = { "GrammarLocator_${it.join('_').replaceAll('-', '_')}" }

    final def createSource = { include, grammarLocator, className, folderName, rootGrammar ->
        template()
                .replaceAll("\\{\\{include}}", include)
                .replaceAll("\\{\\{grammar-locator}}", grammarLocator)
                .replaceAll("\\{\\{class-name}}", className)
                .replaceAll("\\{\\{folder-name}}", folderName)
                .replaceAll("\\{\\{root-grammar}}", rootGrammar)
    }

    Ix.fromArray(file('./src/test/resources/languages/').listFiles())
            .filter { it.isDirectory() }
            .map { new Tuple2<File, String[]>(it, it.name.split('!?\\+')) }
            .forEach {
                final def className = createClassName(it.second)
                final def file = new File((File) root, className + '.java')
                if (!file.createNewFile()) {
                    throw new IOException("Cannot create a file at path: ${file.path}")
                }
                FileUtils.writeStringToFile(
                        file,
                        createSource(
                                createInclude(it.second),
                                createGrammarLocator(it.second),
                                className,
                                it.first.name,
                                it.second[0]
                        ),
                        StandardCharsets.UTF_8
                )
            }
}
